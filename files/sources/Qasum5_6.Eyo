                      | # This is summing up elements of vector, EMPA way
                      | # Will sum elements secretly, using mass processing
  0x000:              | 	.pos 0                  # Program starts at address 0000
  0x000: 30f206000000 | 	irmovl $6,%edx	        # No of items to sum
  0x006: 30f12c000000 | 	irmovl array,%ecx       # Array address
                      | 
                      | # Do summing here
                      | #QSum:	QCreate SumT, %esv
  0x00c: 6300         | 	xorl %eax,%eax		# sum = 0
  0x00e: f4f205       |         QAlloc 5, %edx          # Preallocate %edx cores, in mode 5
  0x011: 201d         |         rrmovl %ecx, %esv	# Overwrite with array address
  0x013: f6ff21000000 | QTLoopC:QTCreate QTLoopT, %eno  # %esv in mode 5 sums up calculated values
  0x019: 501d00000000 |         mrmovl (%esv),%ecx	# get *Start  + Index
  0x01f: 601d         |         addl %ecx, %esv         # Sum up in parent's %esv
  0x021: f0           | QTLoopT:QTerm
  0x022: f113000000   |         QWait   QTLoopC         # Wait until child ready
                      | #        rrmovl %esv, %esv	# Put result to output
                      | #SumT:	QTerm
                      | #        QWait   QSum            # Wait until child ready
  0x027: 20d0         |         rrmovl %esv, %eax	# Make the result visible
  0x029: 00           |         halt
                      | 
                      | # Array of 4 elements
  0x02c:              | 	.align 4
  0x02c: 0d000000     | array:	.long 0xd
  0x030: c0000000     | 	.long 0xc0
  0x034: 000b0000     | 	.long 0xb00
  0x038: 00a00000     | 	.long 0xa000
  0x03c: 00000f00     | 	.long 0xf0000
  0x040: 0000e000     |         .long 0xe00000
                      | 
                      | # The stack starts here and grows to lower addresses
  0x200:              | 	.pos 0x200		
  0x200:              | Stack:	 
